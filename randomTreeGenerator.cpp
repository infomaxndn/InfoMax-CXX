#include <boost/random.hpp>
#include <iostream> 
#include <ctime> 
#include <string>
#include <fstream>
#include "TreeNode.hpp"

#define MAX_NODE_PERCENT 	0.01
#define NUM_OF_WORDS 	109583

using namespace std;
using namespace ndn;
using namespace ndn::infomax; 

int total_nodes = 0;
int max_per_node = 0;
int cnt=0;
static const string dummy

string gen_random_str() {
	
	ifstream rFile ("wordset.txt");
	string line;
	// int randnum = rand() % NUM_OF_WORDS;
	int randnum = (++cnt) % NUM_OF_WORDS;

	if(rFile.is_open())
	{
		for (int i=0; i<randnum; i++)
			getline(rFile, line);		
	}
	rFile.close();
	return line;
}

void buildRandomTree(Name *prefix, vector<TreeNode*> *treeList) {
	
	TreeNode *nullPtr = NULL;
	TreeNode *root = new TreeNode(*prefix, nullPtr);
	treeList->push_back(root);
	int max_per_node_this_round=0;
	for (int i=1; i<total_nodes; i=i)
    {
      	int randNum = rand() % i;
      	TreeNode *parent = treeList->at(randNum);        	  
      	
      	if (max_per_node >= total_nodes-i)      	
      		max_per_node_this_round = total_nodes-i;
      	else
      		max_per_node_this_round = rand() % max_per_node;
      			
      	for (int j=0; j<max_per_node_this_round; j++)
      	{
      		Name *parentName = new Name(parent->getName().toUri());		
			parentName->append(Name(gen_random_str()));

			TreeNode *current = new TreeNode(*parentName, parent);
			// cout << current->getName() << " <- current" << endl;
			treeList->push_back(current);
			parent->addChild(current);
      	}
      	i=i+max_per_node_this_round;
    }
}

int main(int argc, char** argv) {
	if(argc < 4) {
		cerr << "Usage: " << argv[0] << " <NumNodes>" << endl;
		return -1;
	}
	srand(std::time(NULL));
	Name* prefix = new Name(argv[1]);
	total_nodes = stoi(argv[2]);		
	max_per_node = stoi(argv[3]);
	int option = stoi(argv[4]);

	vector<TreeNode*> *treeList = new vector<TreeNode*>;
	buildRandomTree(prefix, treeList);

	for(unsigned int i=0; i<treeList->size(); i++)
	{					
		if (option == 0)
		{			
			if (treeList->at(i)->isLeafNode())
			{
				cout << treeList->at(i)->getName() << "\t" << dummy << endl;
				// cout << treeList->at(i)->getName() << "\t" << endl;
			}
		} else if (option == 1)
		{					
			cout << treeList->at(i)->getName() << "\t" << dummy << endl;
		} else
		{
			cout << "0 or 1" << endl;
		}
	}
	// root->printTreeNodeName();
	return 0;
}